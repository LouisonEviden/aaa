name: Setup Snowflake environment
run-name: Setup Snowflake environment triggered by @${{ github.actor }}
concurrency: snowflake-setup
on:
    ###
    push:
      branches:
        - main
    ###
    workflow_dispatch:
jobs:
    setup-dbt:
        name: Update DBT project files
        runs-on: ubuntu-latest
        permissions:
            contents: write
            pull-requests: write
        steps:
            - uses: actions/checkout@v4
            - uses: cardinalby/export-env-action@v2
              with:
                envFile: '.github/.env'
            - name: Update dbt_project.yml
              run: yq -i 'with(. ; .profile = env(PROJECT_NAME) | .name = env(PROJECT_NAME))' dbt_project.yml
            - run: cat dbt_project.yml
            - name: Update profiles.yml
              run: |
                yq -i '(.template_profile_name | key) = env(PROJECT_NAME)' profiles.yml
                yq -i 'with(.[env(PROJECT_NAME)].outputs[]; .account = env(SNOWFLAKE_ACCOUNT) | .database = env(SNOWFLAKE_DATABASE) | .role = env(SNOWFLAKE_ROLE) | .user = env(SNOWFLAKE_USER) | .warehouse = env(SNOWFLAKE_WAREHOUSE))' profiles.yml
            - run: cat profiles.yml
            - name: Update models/schema.yml
              run: yq -i 'with(.sources.[]; .database = env(SNOWFLAKE_DATABASE))' models/schema.yml
            - run: cat models/schema.yml
            - name: Create Pull Request
              uses: peter-evans/create-pull-request@v7
              with:
                token: ${{ secrets.GITHUB_TOKEN }}
                commit-message: Set up DBT
                branch: github_action/DBT_setup
                title: DBT config set up

    setup-snowflake:
        name: Setup Snowflake
        runs-on: ubuntu-latest
        environment: snowflake-setup
        env:
          SNOWFLAKE_CONNECTIONS_SETUP_PASSWORD: ${{ secrets.SNOW_PASSWORD }}
        steps:
            - uses: actions/checkout@v4
            - uses: cardinalby/export-env-action@v2
              with:
                envFile: '.github/.env'
            - run: pip install snowflake-cli
            - run: snow --help
            # Use default database
            - run: cat ~/.config/snowflake/config.toml
            - run: snow connection add --connection-name SETUP --account ${{ vars.SNOW_ACCOUNT }} --user ${{ vars.SNOW_USER }} --database SNOWFLAKE --schema INFORMATION_SCHEMA --role ${{ vars.SNOW_ROLE }} --warehouse ${{ vars.SNOW_WAREHOUSE }} --default --no-interactive
            - run: cat ~/.config/snowflake/config.toml
            - run: snow connection test
            - run: snow object create database name=${{ env.SNOWFLAKE_DATABASE }} --if-not-exists
            - run: snow object create schema name=Bronze --if-not-exists --database=${{ env.SNOWFLAKE_DATABASE }}
            - run: snow object create schema name=Silver --if-not-exists --database=${{ env.SNOWFLAKE_DATABASE }}
            - run: snow object create schema name=Gold --if-not-exists --database=${{ env.SNOWFLAKE_DATABASE }}
            # export SNOWFLAKE_CONNECTIONS_MYCONNECTION_PASSWORD=
            # export SNOWFLAKE_DEFAULT_CONNECTION_NAME="myconnection"
            # https://docs.snowflake.com/en/developer-guide/snowflake-cli/connecting/configure-connections#define-connections

            #snow object create database/database-role/schema/role/
        # Check if user is account admin ?
        # Create database, schema, roles
        # Assign roles to schema/db